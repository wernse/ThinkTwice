package com.example.myfirstapp;
//this is like each view? clicking send gets directed to this

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.XMLReader;

import com.example.myfirstapp.FatSecretAPI.OAuthBase;
import com.example.myfirstapp.FatSecretAPI;
import com.example.myfirstapp.FatSecretAPI.Result;

import android.R.layout;
import android.support.v7.app.ActionBarActivity;
import android.support.v7.app.ActionBar;
import android.support.v4.app.Fragment;
import android.content.Intent;
import android.os.Bundle;
import android.os.StrictMode;
import android.util.Base64;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.ListAdapter;
import android.widget.ListView;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.os.Build;


public class DisplayMessageActivity extends ActionBarActivity {
	private static final String TAG = "MyActivity";
    private static final String URL_BASE = "http://platform.fatsecret.com/rest/server.api?";
    static final String KEY_ITEM = "item"; // parent node
    static final String KEY_ID = "id";
    static final String KEY_NAME = "name";
    static final String KEY_COST = "type";
    static final String KEY_DESC = "description";
    ArrayList<HashMap<String, String>> menuItems = new ArrayList<HashMap<String, String>>();//for storing swipes
	ArrayList<XMLDataCollected> infoList = new ArrayList<XMLDataCollected>();//data is set into this
	@Override
	protected void onCreate(Bundle savedInstanceState) {
	    super.onCreate(savedInstanceState);
	    setContentView(R.layout.activity_display_message);
	    if (savedInstanceState == null) {
            getSupportFragmentManager().beginTransaction()
                .add(R.id.container, new PlaceholderFragment()).commit();
        }
	    
		// Get the message from the intent
	    Intent intent = getIntent();
	    String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);
	    
	  //  String returnMessage = getdata();
	    // Create the text view

	    
	    Calendar cal = Calendar.getInstance();
	    long today_ms = cal.getTimeInMillis();
	    long today = today_ms / 1000;
	    
	    String consumerKey = "0a5e50b30fa4472ebedcc00ce55514be";
	    String consumerSecret = "f29c08b786db4c2491d0e0c849a4e00f";
	        try {

	            String urlBase = URL_BASE + "search_expression=apple"+"&method=foods.search";//use string builder https://www.youtube.com/watch?v=meXgGO4LTO8
	            
	            
	    	    OAuthBase oAuth = new OAuthBase();

	    		URL url = new URL(urlBase);
	    		
	    		Result result = new Result();
	            //Log.v(TAG, "URL_BASE: " + urlBase);
	    		oAuth.generateSignature(url, consumerKey, consumerSecret, null, null, result);
	    	    String results = result.getSignatureBase();
	    	    
	    	    HandlingXML doingWork = new HandlingXML();
	    	    HandlingXML response = doHttpMethodReq(result.getNormalizedUrl(), "POST", result.getNormalizedRequestParameters() + "&" + OAuthBase.OAUTH_SIGNATURE + "=" + URLEncoder.encode(result.getSignature(), "utf-8"), null,doingWork);
				 //Log.v(TAG, "results1111111111: " + response);
	            //Document doc = loadXmlDocument(response);//using sax over dom beacuse it requires less memory.
				//errorCheck(doc);
				//XMLParser parser = new XMLParser();
				//NodeList nl = doc.getElementsByTagName("food_id");
				
				
			//we want to load a list of responses the append to a ui list
				 ArrayList<XMLDataCollected> infoList =  response.getInformation();
				 ArrayList<HashMap<String, String>> menuItems = response.getHashMap();
				// ArrayList info2 =  new ArrayList();
				 //for(XMLDataCollected a : infoList){
				//	 info2.add(a.getName());
				//	 Log.v(TAG, "NAME: "+a.getName() );
				//	 Log.v(TAG, "NAME: "+a.calculateCalories() );
				// }
				 //Log.v(TAG, "RPE " + info2.size() );
				 //id,description,name
//simple adapter allowing mapping from a list of items to text fields
//array adapter lists a list of items to a single field
				 //ArrayAdapter<String> listAdapter = new ArrayAdapter<String>(this, R.layout.da_item, info2);
				 ListView mainListView = (ListView) findViewById(R.id.listView1);
				 ListAdapter listAdapter = new SimpleAdapter(this, menuItems, R.layout.da_item,
			                new String[] { KEY_NAME, KEY_DESC, KEY_COST }, new int[] {
						 R.id.name, R.id.description, R.id.type });
				
				 mainListView.setAdapter( listAdapter );  
				 
				 mainListView.setOnItemClickListener(new OnItemClickListener() {
			          public void onItemClick(AdapterView<?> parent, View view,
			              int position, long id) {
			        	  Intent intent = getIntent();
			        	  String name = ((TextView) view.findViewById(R.id.name)).getText().toString();
			              String description = ((TextView) view.findViewById(R.id.description)).getText().toString();
			              String cost = ((TextView) view.findViewById(R.id.type)).getText().toString();
			              // selected item 
			              // Launching new Activity on selecting single List Item
			              Intent in = new Intent(getApplicationContext(), SingleListItem.class);//2nd parameter is the activity you pass it to
			              // sending data to new activity
			              in.putExtra(KEY_NAME, name);
			              in.putExtra(KEY_DESC, description);
			              in.putExtra(KEY_COST, cost);
			              
			              if(intent.getSerializableExtra("list") != null){
			            	  ArrayList<XMLDataCollected> infoList = (ArrayList<XMLDataCollected>) intent.getSerializableExtra("list");//passing saved list
			            	  in.putExtra("list", infoList);//passing saved list
			            	  Log.v(TAG, "LIST INFO SIZE"+ infoList.size());
			              }
			                //startActivity(in);
			             
			              startActivity(in);//naviages to the new activity with an intent
			             
			          }
			        });
				 
				 
				 
	        } catch (Exception e) {
	        	Log.v(TAG, "ERROR: "+e );
	        }
	        
	        
//http://platform.fatsecret.com/rest/server.api?food_id=33691&method=food.get&oauth_consumer_key=0a5e50b30fa4472ebedcc00ce55514be
	    //&oauth_nonce=1234&oauth_signature=sAyYTJiIxOGkvFpBcH8L%2BlFQRCQ%3D&oauth_signature_method=HMAC-SHA1&oauth_version=1.0

	    //Log.v(TAG, "index=" + message);
	    // Set the text view as the activity layout
	   // setContentView(textView);//whats this?


	}










    	   
    	 
          

	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu items for use in the action bar
		MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.main_activity_actions, menu);
        return super.onCreateOptionsMenu(menu);
    }

	/**
	 * A placeholder fragment containing a simple view.
	 */
	public static class PlaceholderFragment extends Fragment {

		public PlaceholderFragment() {
		}

		@Override
		public View onCreateView(LayoutInflater inflater, ViewGroup container,
				Bundle savedInstanceState) {
			View rootView = inflater.inflate(R.layout.fragment_display_message,
					container, false);
			return rootView;
		}
	}
    public HandlingXML doHttpMethodReq(String urlStr, String requestMethod, String paramStr, Map<String, String> header, HandlingXML doingWork) throws FatSecretException{
    	StringBuffer sb = new StringBuffer();
    	try {
    		// Construct data
    		
			SAXParserFactory spf = SAXParserFactory.newInstance();
			SAXParser sp = spf.newSAXParser();//new saxparser
			XMLReader xr = sp.getXMLReader();//xml reader
			doingWork = new HandlingXML();
			xr.setContentHandler(doingWork);//look for things we want to look for
			
    		// Send data
    		URL url = new URL(urlStr);
    		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
    		conn.setDoOutput(true);
    		conn.setDoInput(true);
    		if (requestMethod != null)
    			conn.setRequestMethod(requestMethod);
    		
    		if (header != null) {
    			for (String key : header.keySet()) {
    				conn.setRequestProperty(key, header.get(key));
    			}
    		} 

    		// If use POST, must use this
    		OutputStreamWriter wr = null;
    		if (requestMethod != null && !requestMethod.equals("GET") && !requestMethod.equals("DELETE")) {
    			wr = new OutputStreamWriter(conn.getOutputStream());
    			wr.write(paramStr);
    			wr.flush();
    		}
    		
    		// Get the response

    		InputSource a = new InputSource(new InputStreamReader(conn.getInputStream()));
			Log.v(TAG, "DONE");
    		xr.parse(a);//parse it from the document
    		/*
    		BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
    		do {
    			String line = null;
                try{
                	line = br.readLine();
                }
                catch (IOException e) {
                	throw new FatSecretException(1, "An unknown error occurred: 'please try again later'");
                }
    			
    			if (line == null) 
    				break;
    			
    			sb.append(line).append("\n");
    		} while (true);
    		
    		if (wr != null)
    			wr.close();
    		
    		if (br != null)
    			br.close();
    		*/
    	} catch (Exception e) {
    		throw new FatSecretException(1, "An unknown error occurred: 'please try again later'");
    	}
    	String response = sb.toString();
    	
    	return doingWork; 	
    }
    public Document loadXmlDocument(String xml) throws FatSecretException{
    	try{
			DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
			return docBuilder.parse(new InputSource(new StringReader(xml)));
    	}
    	catch(Exception ex){
    		throw new FatSecretException(1, "An unknown error occurred: 'please try again later'");
    	}
    }
    private void errorCheck(Document doc) throws FatSecretException{
    	if(doc.getElementsByTagName("error").getLength() > 0){
    		throw new FatSecretException(Integer.parseInt(doc.getElementsByTagName("code").item(0).getTextContent()), doc.getElementsByTagName("message").item(0).getTextContent());
    	}
    }
}
